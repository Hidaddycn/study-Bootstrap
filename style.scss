@import "functions";
 @import "variables";
 @for $i from 1 through 10{
     .grid-#{$i}{
         background-color: $blue-600;
     }
 }
div{
    background-color: $blue-900;
}
$str : str-index(body,od);
p{
    line-height: $str;
}

$colors:(1:red);
@each $i,$v  in $colors{
    .gs-#{$i}{
        border:1px solid $v;
    }
}
div{
    color:if(null,green,red);
    margin-left:map-get( $negative-spacers, "n1");
    border:1px solid red;
}

body{
    //display: $display;
    color:$body-color;
    font-size: 46px;
    background-color: #fff;
}

@mixin _assert-ascending($map, $map-name) {
    $prev-key: null;
    $prev-num: null;
    @each $key, $num in $map {
      @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
        // Do nothing
      } @else if not comparable($prev-num, $num) {
        @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
      } @else if $prev-num >= $num {
        @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
      }
      $prev-key: $key;
      $prev-num: $num;
    }
  }

  $grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
) !default;

  
//   div{
//     @include _assert-ascending($grid-breakpoints, '$grid-breakpoints');
//       width:$prev-num;
//   }

  @mixin abc($map,$map-name:null){
    $prev-key: null;
    $prev-num: null;
    @each $key ,$value in $map{
        $prev-key: $key;
      $prev-num: $value;
    }
  }

  p{
      @include abc($colors);
      color:$prev-num;
  }